import { Box, useTheme } from "@mui/material";
import { useGetGeographyQuery } from "state/api";
import Header from "components/Header";
import { ResponsiveChoropleth } from "@nivo/geo";
import { geoData } from "state/geoData";

// using nivo charts 'choropleth' component:
// https://nivo.rocks/choropleth/
// *** must incorporate map data at: https://github.com/plouc/nivo/blob/master/website/src/data/components/geo/world_countries.json
// into project (we have it at state/geoData.js)

const Geography = () => {
  const theme = useTheme();		// initialize MUI color theme
  const { data } = useGetGeographyQuery();	// query the api

  return (
		// top/bottom=1.5rem, left/right=2.5rem
    <Box m="1.5rem 2.5rem">
      <Header title="GEOGRAPHY" subtitle="Find where your users are located:" />
      <Box
        mt="40px"
        height="75vh"	// 75% of screen height
        border={`1px solid ${theme.palette.secondary[200]}`}
        borderRadius="4px"
      >
        {data ? (		// *if* there's data:
					// nivo mapping component
					// all configuration info was generated by modifying settings on nivo site
					// then copy and pasting the code it generates:
					// (Ed manually modified some elements)
          <ResponsiveChoropleth
            data={data}
						// all of 'theme' was manually added, based on nivo documentation:
						// https://nivo.rocks/guides/theming/
						// as with component configuration, you can make selections and nivo will
						// generate the appropriate theme code:
            theme={{ 
              axis: {
                domain: {
                  line: {
                    stroke: theme.palette.secondary[200],
                  },
                },
                legend: {
                  text: {
                    fill: theme.palette.secondary[200],
                  },
                },
                ticks: {
                  line: {
                    stroke: theme.palette.secondary[200],
                    strokeWidth: 1,
                  },
                  text: {
                    fill: theme.palette.secondary[200],
                  },
                },
              },
              legends: {
                text: {
                  fill: theme.palette.secondary[200],
                },
              },
              tooltip: {
                container: {
                  color: theme.palette.primary.main,
                },
              },
            }}
            features={geoData.features}	// manually-configured (state/geoData)
            margin={{ top: 0, right: 0, bottom: 0, left: -50 }}	// modified left
            domain={[0, 60]}	// manually modified - min/max for country color coding
            unknownColor="#666666"
            label="properties.name"
            valueFormat=".2s"
            projectionScale={150}	// manually modified
            projectionTranslation={[0.45, 0.6]}	// manually modified
            projectionRotation={[0, 0, 0]}
            borderWidth={1.3}	// manually modified
            borderColor="#ffffff"	// manually modified
            legends={[
              {
                anchor: "bottom-right",	// manually modified
                direction: "column",
                justify: true,
                translateX: 0,	// manually modified
                translateY: -125,	// manually modified
                itemsSpacing: 0,
                itemWidth: 94,
                itemHeight: 18,
                itemDirection: "left-to-right",
                itemTextColor: theme.palette.secondary[200],	// manually modified
                itemOpacity: 0.85,
                symbolSize: 18,
                effects: [
                  {
                    on: "hover",
                    style: {
                      itemTextColor: theme.palette.background.alt,	// manually modified
                      itemOpacity: 1,
                    },
                  },
                ],
              },
            ]}
          />
        ) : (		// if *no data* (yet):
          <>Loading...</>
        )}
      </Box>
    </Box>
  );
};

export default Geography;